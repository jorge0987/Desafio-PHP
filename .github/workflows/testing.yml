name: 🧪 Automated Testing Suite

on:
  schedule:
    # Run daily at 02:00 UTC
    - cron: '0 2 * * *'
  
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test Type'
        required: true
        default: 'smoke'
        type: choice
        options:
        - smoke
        - load
        - stress
        - security
        - all
      target_environment:
        description: 'Target Environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  AWS_REGION: us-east-1

jobs:
  check-environment:
    name: 🔍 Check Environment
    runs-on: ubuntu-latest
    outputs:
      cluster-exists: ${{ steps.check.outputs.exists }}
      load-balancer: ${{ steps.check.outputs.lb_url }}
    
    steps:
      - name: 🔧 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔍 Check Infrastructure
        id: check
        run: |
          # Check if cluster exists
          CLUSTER_STATUS=$(aws eks describe-cluster --name laravel-cluster --region ${{ env.AWS_REGION }} --query 'cluster.status' --output text 2>/dev/null || echo "NOTFOUND")
          
          if [ "$CLUSTER_STATUS" == "ACTIVE" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            
            # Configure kubectl and get load balancer
            aws eks update-kubeconfig --name laravel-cluster --region ${{ env.AWS_REGION }}
            
            NAMESPACE="laravel"
            if [ "${{ github.event.inputs.target_environment }}" == "staging" ]; then
              NAMESPACE="laravel-staging"
            fi
            
            LB_URL=$(kubectl get svc laravel-service -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
            echo "lb_url=$LB_URL" >> $GITHUB_OUTPUT
            
            echo "✅ Cluster active with load balancer: $LB_URL"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "❌ Cluster not found or not active"
          fi

  smoke-tests:
    name: 💨 Smoke Tests
    runs-on: ubuntu-latest
    needs: check-environment
    if: |
      needs.check-environment.outputs.cluster-exists == 'true' &&
      (github.event.inputs.test_type == 'smoke' || github.event.inputs.test_type == 'all' || github.event_name == 'schedule')
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: 🏥 Basic Health Check
        run: |
          LB_URL="${{ needs.check-environment.outputs.load-balancer }}"
          
          if [ -z "$LB_URL" ]; then
            echo "❌ No load balancer URL found"
            exit 1
          fi
          
          echo "Testing: http://$LB_URL/health"
          
          for i in {1..5}; do
            if curl -f --max-time 10 "http://$LB_URL/health"; then
              echo "✅ Health check passed on attempt $i"
              break
            else
              echo "⏳ Health check failed on attempt $i, retrying..."
              sleep 10
            fi
            
            if [ $i -eq 5 ]; then
              echo "❌ Health check failed after 5 attempts"
              exit 1
            fi
          done

      - name: 💨 Run Smoke Tests
        run: |
          LB_URL="${{ needs.check-environment.outputs.load-balancer }}"
          
          # Update k6 script with current URL
          sed -i "s|http://k8s-laraveld.*amazonaws.com|http://$LB_URL|g" benchmarks/k6-scripts/smoke-test.js
          
          # Run smoke test
          k6 run benchmarks/k6-scripts/smoke-test.js

      - name: 📤 Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-results-${{ github.event.inputs.target_environment }}
          path: benchmarks/results/smoke-test-summary.json

  load-tests:
    name: ⚡ Load Tests
    runs-on: ubuntu-latest
    needs: check-environment
    if: |
      needs.check-environment.outputs.cluster-exists == 'true' &&
      (github.event.inputs.test_type == 'load' || github.event.inputs.test_type == 'all')
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: ⚡ Run Load Tests
        run: |
          LB_URL="${{ needs.check-environment.outputs.load-balancer }}"
          
          # Update k6 script with current URL
          sed -i "s|http://k8s-laraveld.*amazonaws.com|http://$LB_URL|g" benchmarks/k6-scripts/load-test.js
          
          # Run load test
          k6 run benchmarks/k6-scripts/load-test.js

      - name: 📤 Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: load-test-results-${{ github.event.inputs.target_environment }}
          path: benchmarks/results/load-test-summary.json

  stress-tests:
    name: 🔥 Stress Tests
    runs-on: ubuntu-latest
    needs: check-environment
    if: |
      needs.check-environment.outputs.cluster-exists == 'true' &&
      (github.event.inputs.test_type == 'stress' || github.event.inputs.test_type == 'all')
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: 🔥 Run Stress Tests
        run: |
          LB_URL="${{ needs.check-environment.outputs.load-balancer }}"
          
          # Update k6 script with current URL
          sed -i "s|http://k8s-laraveld.*amazonaws.com|http://$LB_URL|g" benchmarks/k6-scripts/stress-test.js
          
          # Run stress test
          k6 run benchmarks/k6-scripts/stress-test.js

      - name: 📤 Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: stress-test-results-${{ github.event.inputs.target_environment }}
          path: benchmarks/results/stress-test-summary.json

  security-tests:
    name: 🛡️ Security Tests
    runs-on: ubuntu-latest
    needs: check-environment
    if: |
      needs.check-environment.outputs.cluster-exists == 'true' &&
      (github.event.inputs.test_type == 'security' || github.event.inputs.test_type == 'all')
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: ⚙️ Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: 🔗 Configure Kubernetes Access
        run: |
          aws eks update-kubeconfig --name laravel-cluster --region ${{ env.AWS_REGION }}

      - name: 🛡️ Security Checks
        run: |
          echo "=== Pod Security Context ==="
          NAMESPACE="laravel"
          if [ "${{ github.event.inputs.target_environment }}" == "staging" ]; then
            NAMESPACE="laravel-staging"
          fi
          
          # Check if pods are running as non-root
          kubectl get pods -n $NAMESPACE -o jsonpath='{.items[*].spec.securityContext.runAsNonRoot}'
          
          # Check for privileged containers
          kubectl get pods -n $NAMESPACE -o jsonpath='{.items[*].spec.containers[*].securityContext.privileged}'
          
          # Check resource limits
          kubectl describe pods -n $NAMESPACE | grep -A 5 "Limits:"
          
          echo "=== Network Policies ==="
          kubectl get networkpolicies -n $NAMESPACE
          
          echo "=== RBAC Permissions ==="
          kubectl auth can-i --list --as=system:serviceaccount:$NAMESPACE:default -n $NAMESPACE

      - name: 🔍 Container Image Scan
        run: |
          # Get current image from deployment
          NAMESPACE="laravel"
          if [ "${{ github.event.inputs.target_environment }}" == "staging" ]; then
            NAMESPACE="laravel-staging"
          fi
          
          IMAGE=$(kubectl get deployment laravel-deployment -n $NAMESPACE -o jsonpath='{.spec.template.spec.containers[0].image}')
          echo "Scanning image: $IMAGE"
          
          # Configure ECR login
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin 533267409012.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          
          # Pull and scan image
          docker pull $IMAGE
          
          # Install Trivy
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy
          
          # Scan for vulnerabilities
          trivy image --severity HIGH,CRITICAL $IMAGE

  test-summary:
    name: 📊 Test Summary
    runs-on: ubuntu-latest
    needs: [smoke-tests, load-tests, stress-tests, security-tests]
    if: always()
    
    steps:
      - name: 📥 Download Test Results
        uses: actions/download-artifact@v4
        with:
          path: test-results
        continue-on-error: true

      - name: 📊 Generate Summary
        run: |
          echo "# 🧪 Test Suite Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ github.event.inputs.target_environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Test Type**: ${{ github.event.inputs.test_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 📋 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "| Test Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Smoke Tests | ${{ needs.smoke-tests.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Load Tests | ${{ needs.load-tests.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Stress Tests | ${{ needs.stress-tests.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Tests | ${{ needs.security-tests.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Process test results if available
          if [ -d "test-results" ]; then
            find test-results -name "*.json" -type f | while read file; do
              echo "Processing: $file"
              if [ -s "$file" ]; then
                cat "$file" | jq -r '"## " + .test_type + " Test Details\n- Success Rate: " + (.success_rate | tostring) + "%\n- Total Checks: " + (.total_checks | tostring) + "\n- Average Response Time: " + (.average_response_time | tostring) + "ms\n"' >> $GITHUB_STEP_SUMMARY || true
              fi
            done
          fi
