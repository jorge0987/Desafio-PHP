name: 🏗️ Infrastructure Management

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Infrastructure Action'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy
      environment:
        description: 'Target Environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
  
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/infrastructure.yml'

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.5.7

jobs:
  terraform-plan:
    name: 📋 Terraform Plan
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'plan' || github.event_name == 'push'
    outputs:
      plan-exitcode: ${{ steps.plan.outputs.exitcode }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🏗️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 🔍 Terraform Format Check
        working-directory: terraform
        run: terraform fmt -check

      - name: 🚀 Terraform Init
        working-directory: terraform
        run: |
          terraform init \
            -backend-config="bucket=laravel-terraform-state-${{ github.repository_owner }}" \
            -backend-config="key=${{ github.event.inputs.environment || 'staging' }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: ✅ Terraform Validate
        working-directory: terraform
        run: terraform validate

      - name: 📊 Terraform Plan
        id: plan
        working-directory: terraform
        run: |
          terraform plan \
            -var-file="terraform.tfvars" \
            -var="environment=${{ github.event.inputs.environment || 'staging' }}" \
            -out=tfplan \
            -detailed-exitcode
        continue-on-error: true

      - name: 📄 Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `
            ## 🏗️ Terraform Plan Results
            
            **Environment**: ${{ github.event.inputs.environment || 'staging' }}
            **Exit Code**: ${{ steps.plan.outputs.exitcode }}
            
            <details>
            <summary>📊 Plan Output</summary>
            
            \`\`\`hcl
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            
            </details>
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  terraform-apply:
    name: 🚀 Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.event.inputs.action == 'apply' && needs.terraform-plan.outputs.plan-exitcode == '2'
    environment: 
      name: ${{ github.event.inputs.environment }}
      url: https://console.aws.amazon.com/eks/home?region=us-east-1#/clusters
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🏗️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 🚀 Terraform Init
        working-directory: terraform
        run: |
          terraform init \
            -backend-config="bucket=laravel-terraform-state-${{ github.repository_owner }}" \
            -backend-config="key=${{ github.event.inputs.environment }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: 📊 Terraform Plan
        working-directory: terraform
        run: |
          terraform plan \
            -var-file="terraform.tfvars" \
            -var="environment=${{ github.event.inputs.environment }}" \
            -out=tfplan

      - name: ✅ Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve tfplan

      - name: 📋 Get Cluster Info
        id: cluster-info
        run: |
          CLUSTER_NAME=$(aws eks list-clusters --region ${{ env.AWS_REGION }} --query 'clusters[0]' --output text)
          CLUSTER_ENDPOINT=$(aws eks describe-cluster --name $CLUSTER_NAME --region ${{ env.AWS_REGION }} --query 'cluster.endpoint' --output text)
          echo "cluster-name=$CLUSTER_NAME" >> $GITHUB_OUTPUT
          echo "cluster-endpoint=$CLUSTER_ENDPOINT" >> $GITHUB_OUTPUT

      - name: 🔧 Update Kubeconfig
        run: |
          aws eks update-kubeconfig \
            --name ${{ steps.cluster-info.outputs.cluster-name }} \
            --region ${{ env.AWS_REGION }}

      - name: ✅ Verify Cluster
        run: |
          kubectl get nodes
          kubectl get pods -A

      - name: 📢 Notify Success
        if: success()
        run: |
          echo "🎉 Infrastructure deployed successfully!"
          echo "Cluster: ${{ steps.cluster-info.outputs.cluster-name }}"
          echo "Endpoint: ${{ steps.cluster-info.outputs.cluster-endpoint }}"

  terraform-destroy:
    name: 💥 Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'destroy'
    environment: 
      name: ${{ github.event.inputs.environment }}-destroy
      url: https://console.aws.amazon.com/eks/home?region=us-east-1
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🏗️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 🚀 Terraform Init
        working-directory: terraform
        run: |
          terraform init \
            -backend-config="bucket=laravel-terraform-state-${{ github.repository_owner }}" \
            -backend-config="key=${{ github.event.inputs.environment }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: 🧹 Clean Applications First
        continue-on-error: true
        run: |
          # Update kubeconfig if cluster exists
          CLUSTER_NAME=$(aws eks list-clusters --region ${{ env.AWS_REGION }} --query 'clusters[0]' --output text)
          if [ "$CLUSTER_NAME" != "None" ]; then
            aws eks update-kubeconfig --name $CLUSTER_NAME --region ${{ env.AWS_REGION }}
            
            # Remove all Helm releases
            helm list -A -q | xargs -I {} helm uninstall {} -n $(helm list -A | grep {} | awk '{print $2}') || true
            
            # Delete all load balancers
            kubectl get svc -A -o json | jq -r '.items[] | select(.spec.type=="LoadBalancer") | "\(.metadata.namespace) \(.metadata.name)"' | while read ns name; do
              kubectl delete svc $name -n $ns || true
            done
            
            # Wait for load balancers cleanup
            sleep 60
          fi

      - name: 💥 Terraform Destroy
        working-directory: terraform
        run: |
          terraform destroy \
            -var-file="terraform.tfvars" \
            -var="environment=${{ github.event.inputs.environment }}" \
            -auto-approve

      - name: 📢 Notify Destruction
        if: success()
        run: |
          echo "💥 Infrastructure destroyed successfully!"
          echo "Environment: ${{ github.event.inputs.environment }}"
